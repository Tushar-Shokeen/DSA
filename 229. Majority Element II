// Boyer Moore Voting Algorithm
//Optimal Soln TC - O(n) SC - O(1)

//Java Soln
public List<Integer> majorityElement(int[] nums) {
        int num1 = -1, num2 = -1;
        int count1 = 0, count2 = 0;
        int len = nums.length;
        
        for(int x : nums){
            if(x == num1) 
                count1++;
            else if(x == num2)
                count2++;
            else if(count1 == 0){
                num1 = x;
                count1 = 1;
            }
            else if(count2 == 0){
                num2 = x;
                count2 = 1;
            }
            else{
                count1--;
                count2--;
            }
        }
        
        List<Integer> ans = new ArrayList<Integer>();
        
        count1 = 0;
        count2 = 0;
        
        for(int x : nums){
            if(x == num1)
                count1++;
            else if(x == num2)
                count2++;
        }
        if(count1 > len/3)
            ans.add(num1);
        if(count2 > len/3)
            ans.add(num2);
        
        return ans;
    }
    
    //C++ Soln
    
    vector<int> majorityElement(vector<int>& nums) {
        vector<int> ans;
        int num1 = -1, num2 = -1;
        int count1 = 0, count2 = 0;
        
        for(auto x : nums){
            if(x == num1) 
                count1++;
            else if(x == num2)
                count2++;
            else if(count1 == 0){
                num1 = x;
                count1 = 1;
            }
            else if(count2 == 0){
                num2 = x;
                count2 = 1;
            }
            else{
                count1--;
                count2--;
            }
        }
        
        count1 = 0;
        count2 = 0;
        
        for(auto x : nums){
            if(x == num1)
                count1++;
            else if(x == num2)
                count2++;
        }
        
        if(count1 > nums.size()/3)
            ans.push_back(num1);
        if(count2 > nums.size()/3)
            ans.push_back(num2);
        
        return ans;
    }
