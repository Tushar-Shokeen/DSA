// Brute Force 
//Sort the array and find the length. 
TC - O(NlogN) + O(N).

class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        if(nums.empty())
            return 0;
        sort(nums.begin(), nums.end());
        int count=1, maxcount = 0;
        for(int i=1 ; i<nums.size() ; i++){
            if(nums[i] == nums[i-1]) continue;
            if(nums[i] == nums[i-1]+1)
                count++;
            else{
                if(count > maxcount)
                    maxcount = count;
                count = 1;
            }
            
        }
        if(count > maxcount)
                maxcount = count;
        return maxcount;
    }
};


//Optimal Soln TC- O(3N)  SC - O(N) for hashset.
int longestConsecutive(vector < int > & nums) {
  set < int > hashSet;
  for (int num: nums) {
    hashSet.insert(num);
  }

  int longestStreak = 0;

  for (int num: nums) {
    if (!hashSet.count(num - 1)) {
      int currentNum = num;
      int currentStreak = 1;

      while (hashSet.count(currentNum + 1)) {
        currentNum += 1;
        currentStreak += 1;
      }

      longestStreak = max(longestStreak, currentStreak);
    }
  }

  return longestStreak;
}
